version: "3.7" # https://docs.docker.com/compose/compose-file/

volumes:
    #prometheus-config:
    #    labels:
    #        com.example.prometheus-config.description: "Prometheus config"
    #        com.example.prometheus-config.department: "DevOps"
    prometheus-data:
        labels:
            com.example.prometheus-data.description: "Prometheus data"
            com.example.prometheus-data.department: "DevOps"
    #grafana-config:
    #    labels:
    #        com.example.grafana-config.description: "Grafana config"
    #        com.example.grafana-config.department: "DevOps"
    grafana-data:
        labels:
            com.example.grafana-data.description: "Grafana data"
            com.example.grafana-data.department: "DevOps"
    mssql-data:
        labels:
            com.example.mssql-data.description: "MS SQL data"
            com.example.mssql-data.department: "DevOps"
    #alertmanager-config:
    #    labels:
    #        com.example.alertmanager-config.description: "Alertmanager config"
    #        com.example.alertmanager-config.department: "DevOps"
    filebeat-data:
        labels:
            com.example.filebeat-data.description: "Filebeat data"
            com.example.filebeat-data.department: "DevOps"
    elasticsearch-data:
        labels:
            com.example.elasticsearch-data.description: "Elasticsearch data"
            com.example.elasticsearch-data.department: "DevOps"

services:
    prometheus:
        build:
            context: .
            #network: host
            dockerfile: image/prometheus/Dockerfile
            args:
                PROMETHEUS_TAG: ${PROMETHEUS_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${PROMETHEUS_TAG}
        network_mode: "host"
        volumes:
            #- prometheus-config:/etc/prometheus
            - prometheus-data:/prometheus
        #environment:
        #    - TZ=Asia/Shanghai
        command:
            - --web.listen-address=0.0.0.0:9090
            - --config.file=/etc/prometheus/prometheus.yml
            - --storage.tsdb.path=/prometheus
            - --web.console.libraries=/usr/share/prometheus/console_libraries
            - --web.console.templates=/usr/share/prometheus/consoles
        restart: always
        #logging:
        #    driver: "syslog"
        #    options:
        #        syslog-address: "udp://127.0.0.1:9000"
        #        tag: "app-prometheus"
    grafana:
        build:
            context: .
            #network: host
            dockerfile: image/grafana/Dockerfile
            args:
                GRAFANA_TAG: ${GRAFANA_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${GRAFANA_TAG}
        network_mode: "host"
        volumes:
            #- grafana-config:/etc/grafana
            - grafana-data:/var/lib/grafana
        restart: always
    mssql:
        build:
            context: .
            #network: host
            dockerfile: image/mssql/Dockerfile
            args:
                MSSQL_URL: ${MSSQL_URL}
                MSSQL_TAG: ${MSSQL_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${MSSQL_TAG}
        network_mode: "host"
        volumes:
            - mssql-data:/var/opt/mssql
        environment:
            - ACCEPT_EULA=Y
            - SA_PASSWORD=${SA_PASSWORD}
            - MSSQL_PID=Developer
        restart: always
    #alertmanager:
    #    image: "prom/alertmanager:v0.15.2"
    #    network_mode: "host"
    #    volumes:
    #        - "alertmanager-config:/etc/alertmanager"
    #    restart: always
    filebeat:
        build:
            context: .
            #network: host
            dockerfile: image/filebeat/Dockerfile
            args:
                FILEBEAT_TAG: ${FILEBEAT_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${FILEBEAT_TAG}
        network_mode: "host"
        volumes:
            - filebeat-data:/usr/share/filebeat/data:rw
            #- "/var/lib/docker/containers:/usr/share/filebeat/dockerlogs:ro"
            #- "/var/run/docker.sock:/var/run/docker.sock:ro"
        restart: always
    elasticsearch:
        build:
            context: .
            #network: host
            dockerfile: image/elasticsearch/Dockerfile
            args:
                ELASTICSEARCH_TAG: ${ELASTICSEARCH_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${ELASTICSEARCH_TAG}
        network_mode: "host"
        volumes:
            - "elasticsearch-data:/usr/share/elasticsearch/data"
        environment:
            # TODO: need cluster for production. Try it!
            # For production mode:
            #- cluster.initial_master_nodes=elasticsearch
            # For development mode:
            - discovery.type=single-node
        ulimits:
            memlock:
                soft: -1
                hard: -1
        restart: always
    kibana:
        build:
            context: .
            #network: host
            dockerfile: image/kibana/Dockerfile
            args:
                KIBANA_TAG: ${KIBANA_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${KIBANA_TAG}
        network_mode: "host"
        environment:
            - SERVER_NAME=kibana
            - ELASTICSEARCH_HOSTS=http://127.0.0.1:9200
            - XPACK_MONITORING_ENABLED=true
        restart: always
    logstash:
        build:
            context: .
            #network: host
            dockerfile: image/logstash/Dockerfile
            args:
                LOGSTASH_TAG: ${LOGSTASH_TAG}
        image: ${COMPOSE_PROJECT_NAME}/${LOGSTASH_TAG}
        network_mode: "host"
        restart: always
